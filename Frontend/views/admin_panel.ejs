<%- include('../partials/head') %>

    <body>


        <section id="header">
            <a href="#"> <img src="/img/logo.png" class="logo" alt=""></a>
            <div>
                <ul id="navbar">

                    <form>
                        <div class="search">
                            <span class="search-icon material-symbols-outlined">search</span>
                            <input class="search-input" type="search" placeholder="Search">
                        </div>
                    </form>

                    <li><a href="/">Home</a></li>
                    <li><a class="active" href="/admin_panel">Dashboard</a></li>
                    <li><a href="/product_admin">Products</a></li>
                    <li><a href="/promotion_admin">Promotion</a></li>

                    <ul>
            </div>
        </section>

        <section id="page-header">

            <h2># Dashboard</h2>

        </section>

        <section id="interface">
            <h3 class="i-name">
                Dashboard
            </h3>
            <div id="button_create">
                <a href="/add_user">
                    <button>Add User</button>
                </a>
            </div>
            <div class="values">
                <div class="val-box" id="users_page">
                    <i class="fa-solid fa-users"></i>
                    <div>
                        <h3 id="user-length">

                        </h3>
                        <span>Users</span>
                    </div>
                </div>
                <div class="val-box" id="orders_page">
                    <i class="fa-solid fa-cart-shopping"></i>
                    <div>
                        <h3 id="orderItems-length">

                        </h3>
                        <span>Total Orders</span>
                    </div>
                </div>

                <div class="val-box" id="products_page">
                    <i class="fa-solid fa-box"></i>
                    <div>
                        <h3 id="products-length">

                        </h3>
                        <span>Product Sell</span>
                    </div>
                </div>
                <div class="val-box" id="promotions_page">
                    <i class="fa-solid fa-ticket"></i>
                    <div>
                        <h3 id="discounts-length">

                        </h3>
                        <span>Total Coupon</span>
                    </div>
                </div>
                <div class="val-box" id="analize-page">
                    <i class="fa-solid fa-baht-sign"></i>
                    <div>
                        <span>Analyze</span>
                    </div>
                </div>
            </div>
        </section>


        <section id="board" class="">
            <table id="header-table" width="100%">
                <thead>
                </thead>
                <tbody>
                    <tr id="loader">
                        <td colspan="6">
                            <div class="loader"></div>
                        </td>
                    </tr>

                </tbody>
            </table>
        </section>

        <!-- <script src="/loader.js" defer></script> -->
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script>
            const emptyPage = (text) => {
                // Create an h1 element with the text "No products found" and class "no-product"
                const h1Element = document.createElement('h1');
                h1Element.textContent = `${text}`;
                h1Element.classList.add('no-product');

                // Get the reference node after which the h1 will be inserted
                const boardHeaderSection = document.getElementById('board');
                const referenceNode = boardHeaderSection.nextElementSibling;

                // Insert the h1 element after the page-header section
                boardHeaderSection.parentNode.insertBefore(h1Element, referenceNode);
            }

            const deleteUser = async (user_id) => {
                try {
                    // Delete the item from the server
                    await axios.delete(`http://localhost:8080/api/User/deleteUser/${user_id}`);

                    // Remove all td elements inside the corresponding row from the cart table
                    const rowToRemove = document.querySelector(`#board tr[id="${user_id}"]`);
                    if (rowToRemove) {
                        const cellsToRemove = rowToRemove.querySelectorAll('td');
                        cellsToRemove.forEach(cell => {
                            cell.remove(); // Remove each td element from the row
                        });

                        rowToRemove.remove(); // Remove the row from the DOM
                    } else {
                        console.error('Row not found for item:', user_id);
                    }



                    const userCount = document.querySelectorAll('#board tbody tr').length;
                    let userLength = document.querySelector("#user-length");
                    userLength.innerHTML = userCount;
                    if (userCount === 0) {
                        emptyPage("No Users found");
                    }
                } catch (error) {
                    console.error('Error deleting item:', error);
                    // Optionally, you can inform the user about the deletion error
                    // For example:
                    alert('An error occurred while deleting the user. Please try again later.');
                }
            };
        </script>
        <script>
            let productName = [];
            let orderUserId = [];

            const loadUsers = async (allUsers) => {
                const headerTable = document.querySelector("#header-table thead");
                headerTable.innerHTML = '';
                const row = document.createElement("tr");
                row.innerHTML = `
                        <td>Remove</td>
                        <td>Users</td>
                        <td>Name</td>
                        <td>Email</td>
                        <td>Role</td>
                        <td>History</td>
                        <td></td>
                        `
                headerTable.appendChild(row);



                const tableBody = document.querySelector("#board tbody");

                // Clear existing rows
                tableBody.innerHTML = '';
                for (user of allUsers) {
                    if (user.role === "ADMIN") {
                        continue;
                    }
                    const row = document.createElement("tr");
                    row.setAttribute("id", `${user._id}`);
                    row.innerHTML = `
                        <td><a onClick="deleteUser('${user._id}')"><i id="remove"class="fa-solid fa-circle-xmark"></i></a></td>
                        <td><img src="/img/user.png"></a></li></td>
                        <td>${user.username}</td>
                        <td>${user.email}</td>
                        <td>${user.role}</td>
                        <td class="view"><a href="/view" onclick="sessionStorage.setItem('userId', '${user._id}')">View</a></td>
                        <td class="edit"><a href="/edit_by_admin">Edit</a></td>
                        `

                    tableBody.appendChild(row);
                }

                const userCount = document.querySelectorAll('#board tbody tr').length;
                let userLength = document.querySelector("#user-length");
                userLength.innerHTML = userCount;
                if (userCount === 0) {
                    emptyPage("No Users found");
                }
                else {
                    let countNoProduct = document.querySelector('.no-product');
                    if (countNoProduct) {
                        countNoProduct.remove();
                    }
                }


            }
            const loadOrders = async (allOrders) => {
                const headerTable = document.querySelector("#header-table thead");

                // Clear existing rows
                headerTable.innerHTML = '';
                const row = document.createElement("tr");
                row.innerHTML = `
                        <td>Remove</td>
                        <td>Order Id</td>
                        <td>Order Date</td>
                        <td>Product Name</td>
                        <td>Price</td>
                        <td>Quantity</td>
                        <td>Status</td>
                        <td>User</td>
                        
                        `;
                headerTable.appendChild(row);

                const tableBody = document.querySelector("#board tbody");

                // Clear existing rows
                tableBody.innerHTML = '';
                let k = 0;
                for (const orderData of allOrders) {
                    // console.log('kuy', order)


                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td><a href="#"><i class="fa-solid fa-circle-xmark"></i></a></td>
                        <td>${orderData.order}</td>
                        <td>${orderData.createdAt}</td>
                        <td>${productName[k]}</td>
                        <td>${orderData.price}</td>
                        <td>${orderData.qty}</td>
                        <td>
                            <select class="selection" id="selectStatus">
                                <option value="Pending">Pending</option>
                                <option value="Shipping">Shipping</option>
                                <option value="Delivered">Delivered</option>
                            </select>
                        </td>
                        <td>${orderUserId[k]}</td>
                    `;
                    tableBody.appendChild(row);
                    k++;

                    // Change background color of select element based on selected value
                    document.querySelectorAll(".selection").forEach(function (selectStatus) {
                        selectStatus.addEventListener("change", function () {
                            switch (selectStatus.value) {
                                case "Pending":
                                    selectStatus.style.backgroundColor = "#eafffa";
                                    break;
                                case "Shipping":
                                    selectStatus.style.backgroundColor = "#fcefff";
                                    break;
                                case "Delivered":
                                    selectStatus.style.backgroundColor = "#dcffe0";
                                    break;
                                default:
                                    selectStatus.style.backgroundColor = "eafffa"; // Reset background color if none of the cases match
                            }
                        });
                    });

                }
            };
            const loadProducts = async (allProducts) => {
                const headerTable = document.querySelector("#header-table thead");
                let countNoProduct = document.querySelector('.no-product');
                if (countNoProduct) {
                    countNoProduct.remove();
                }
                headerTable.innerHTML = '';
                const row = document.createElement("tr");
                row.innerHTML = `
                        <td>Id</td>
                        <td>Name</td>
                        <td>Quantity</td>
                        <td>Total Sales</td>
                        `
                headerTable.appendChild(row);

                const tableBody = document.querySelector("#board tbody");

                // Clear existing rows
                tableBody.innerHTML = '';

                for (const product of allProducts) {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${product._id}</td>
                        <td>${product.name}</td>
                        <td>${product.price}</td>
                        <td>${product.stock}</td>
                       
                    `;
                    tableBody.appendChild(row);
                }
            };


            const loadAnalyzes = async (allProducts, allCategory) => {
                const headerTable = document.querySelector("#header-table thead");
                let countNoProduct = document.querySelector('.no-product');
                if (countNoProduct) {
                    countNoProduct.remove();
                }
                console.log("headerTAble", headerTable);
                headerTable.innerHTML = '';
                const row = document.createElement("tr");
                row.innerHTML = `
                        <td>Category</td>
                        <td>Product</td>
                        <td>Quantity</td>
                        <td>Total Sales</td>
                        `;
                headerTable.appendChild(row);

                const tableBody = document.querySelector("#board tbody");

                // Clear existing rows
                tableBody.innerHTML = '';
            };


            const loadPromotions = async (allPromotions) => {
                const tableBody = document.querySelector("#board tbody");

                // Clear existing rows
                tableBody.innerHTML = '';

                for (const promotion of allPromotions) {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${promotion.promotionId}</td>
                        <td>${promotion.promotionName}</td>
                        <td>${promotion.discount}</td>
                        <td>${promotion.startDate}</td>
                        <td>${promotion.endDate}</td>
                        <td class="view"><a href="/view_promotion/${promotion.promotionId}">View</a></td>
                        <td class="edit"><a href="/edit_promotion/${promotion.promotionId}">Edit</a></td>
                    `;
                    tableBody.appendChild(row);
                }
            };








        </script>

        <script>

            const allowedRole = ["ADMIN"];
            const allProducts = document.querySelector("#products_page");
            const allPromotions = document.querySelector("#promotions_page");
            const allUsers = document.querySelector("#users_page");
            const allOrders = document.querySelector("#orders_page");

            const analize_page = document.querySelector("#analize-page");

            const loadData = async () => {
                try {
                    let curUser = await axios.get("http://localhost:8080/api/Authentication/currentUser", {
                        withCredentials: true
                    });
                    // console.log(curUser.data)
                    if (!curUser.data) {
                        window.location.href = "/"
                    }
                    else {
                        curUser = await axios.get(`http://localhost:8080/api/User/getUser/${curUser.data}`)
                        const role = curUser.data.role;
                        // console.log("role", role);
                        if (allowedRole.includes(role)) {
                            let users = await axios.get("http://localhost:8080/api/User/getUsers", {
                                withCredentials: true
                            })

                            users = users.data;
                            let orderItems = await axios.get("http://localhost:8080/api/OrderItem/getAllOrderItem");
                            orderItems = orderItems.data;
                            let discounts = await axios.get("http://localhost:8080/api/Discount/getDiscount");
                            discounts = discounts.data;
                            let products = await axios.get("http://localhost:8080/api/Product/getProduct");
                            products = products.data;
                            let orderItemsLength = document.querySelector("#orderItems-length");
                            orderItemsLength.innerHTML = orderItems.length;
                            let productLength = document.querySelector("#products-length")
                            productLength.innerHTML = products.length;
                            let discountLength = document.querySelector("#discounts-length")
                            discountLength.innerHTML = discounts.length;
                            for (const orderData of orderItems) {
                                const product = await axios.get(`http://localhost:8080/api/Product/getProduct/${orderData.product}`);
                                productName.push(product.data.name);
                                const order = await axios.get(`http://localhost:8080/api/Order/getOrder/${orderData.order}`);
                                orderUserId.push(order.data.user);

                            }
                            // Edit pls
                            let category = ""

                            const loader = document.querySelector("#loader");

                            loader.classList.add("loader-hidden");

                            loader.addEventListener("transitionend", () => {
                                document.body.removeChild("loader");
                            })

                            const rowLoader = document.querySelector("#loader")
                            rowLoader.remove();
                            loadUsers(users);

                            allUsers.addEventListener("click", () => {
                                // console.log("here");
                                // window.location.href = "/product_admin"
                                loadUsers(users);

                            })

                            allOrders.addEventListener("click", async () => {
                                // console.log("here");
                                // window.location.href = "/product_admin"
                                await loadOrders(orderItems);
                            })

                            allProducts.addEventListener("click", () => {
                                // console.log("here");
                                // window.location.href = "/product_admin"
                                // console.log(allProducts);
                                loadProducts(products);
                            })

                            allPromotions.addEventListener("click", () => {
                                // console.log("here");
                                // window.location.href = "/promotion_admin"
                                // loadPromotions(discounts);
                            })

                            analize_page.addEventListener("click", () => {
                                // console.log("here");
                                // window.location.href = "/analize-page"
                                loadAnalyzes(products, category);

                            })


                        }
                        else {
                            console.log("Permission not allowed");
                            window.location.href = "/"
                        }
                    }
                } catch (err) {
                    emptyPage(`${err}`);
                }

            }

            loadData();

        </script>
        <%- include('../partials/footer') %>